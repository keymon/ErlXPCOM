/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 * 
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is rbXPCOM.
 * 
 * The Initial Developer of the Original Code is Kenichi Komiya.
 * Portions created by Kenichi Komiya are Copyright (C) 2000 Kenichi
 * Komiya.  All Rights Reserved.
 * 
 * Contributor(s): 
 *   Kenichi Komiya <kom@mail1.accsnet.ne.jp> (original auther)
 * 
 * Alternatively, the contents of this file may be used under the
 * terms of the GNU General Public License Version 2 or later (the
 * "GPL"), in which case the provisions of the GPL are applicable 
 * instead of those above.  If you wish to allow use of your 
 * version of this file only under the terms of the GPL and not to
 * allow others to use your version of this file under the MPL,
 * indicate your decision by deleting the provisions above and
 * replace them with the notice and other provisions required by
 * the GPL.  If you do not delete the provisions above, a recipient
 * may use your version of this file under either the MPL or the
 * GPL.
 */

#include "nsISupports.idl"

[scriptable, uuid(3dbde43a-7263-4d0f-af68-31eaac9361d4)]
interface rbIXPCOMTest : nsISupports {
        PRInt16 AddPRInt16( in PRInt16 a, in PRInt16 b, inout PRInt16 c, 
                            out PRInt16 neg);

        const PRInt16 aConst = 1;
        const PRUint32 AnotherConst = 2 << 30;

        attribute string foo;
        readonly attribute string bar;

        readonly attribute DOMString domstr;
        						  // type code
        // int8 EchoPRInt8( in int8 n );		  // 0
        PRInt16 EchoPRInt16( in PRInt16 n );		  // 1
        PRInt32 EchoPRInt32( in PRInt32 n );		  // 2
        PRInt64 EchoPRInt64( in PRInt64 n );		  // 3
        PRUint8 EchoPRUint8( in PRUint8 n );		  // 4
        PRUint16 EchoPRUint16( in PRUint16 n );		  // 5
        PRUint32 EchoPRUint32( in PRUint32 n );		  // 6
        PRUint64 EchoPRUint64( in PRUint64 n );		  // 7
	float  EchoFloat( in float n );			  // 8
	double EchoDouble( in double n );		  // 9
        boolean EchoBoolean( in boolean b );		  // 10
	wchar EchoWchar ( in wchar wc );		  // 11
	char EchoChar( in char c );			  // 12
        // void ptr is unsupported                        // 13
        nsIIDPtr EchoIIDPtr( in nsIIDPtr id );            // 14
	DOMString EchoDOMString( in DOMString s );        // 15
	string EchoString( in string s );                 // 16
	wstring EchoWstring( in wstring s );              // 17
        rbIXPCOMTest EchoInterfacePtr(in rbIXPCOMTest i); // 18
                                                          // 19
        void EchoInterfaceIsPtr(in nsIIDPtr idin,
                                [iid_is(idin)] in nsQIResult ii,
                                out nsIIDPtr idout,
                                [iid_is(idout), retval] out nsQIResult io);
        // arrays are tested separately                   // 20
                                                          // 21
	void EchoStringSizeIs( in PRUint32 size,
                               [size_is(size)] in string si,
                               [retval, size_is(size)] out string so);
                                                          // 22
	void EchoWstringSizeIs( in PRUint32 size,
                                [size_is(size)] in wstring si,
                                [retval, size_is(size)] out wstring so);

        void EchoArrayI16( in PRUint32 size, 
                         [array, size_is(size)] in PRInt16 i,
                         [array, size_is(size)] out PRInt16 o);
        void EchoArrayI32( in PRUint32 size, 
                         [array, size_is(size)] in PRInt32 i,
                         [array, size_is(size)] out PRInt32 o);
        void EchoArrayI64( in PRUint32 size, 
                         [array, size_is(size)] in PRInt64 i,
                         [array, size_is(size)] out PRInt64 o);
        void EchoArrayU8( in PRUint32 size, 
                         [array, size_is(size)] in PRUint8 i,
                         [array, size_is(size)] out PRUint8 o);
        void EchoArrayU16( in PRUint32 size, 
                         [array, size_is(size)] in PRUint16 i,
                         [array, size_is(size)] out PRUint16 o);
        void EchoArrayU32( in PRUint32 size, 
                         [array, size_is(size)] in PRUint32 i,
                         [array, size_is(size)] out PRUint32 o);
        void EchoArrayU64( in PRUint32 size, 
                         [array, size_is(size)] in PRUint64 i,
                         [array, size_is(size)] out PRUint64 o);
        void EchoArrayFLOAT( in PRUint32 size, 
                         [array, size_is(size)] in float i,
                         [array, size_is(size)] out float o);
        void EchoArrayDOUBLE( in PRUint32 size, 
                         [array, size_is(size)] in double i,
                         [array, size_is(size)] out double o);
        void EchoArrayBOOL( in PRUint32 size, 
                          [array, size_is(size)] in boolean i,
                          [array, size_is(size)] out boolean o);
        void EchoArrayCHAR( in PRUint32 size, 
                          [array, size_is(size)] in wchar i,
                          [array, size_is(size)] out wchar o);
        void EchoArrayWCHAR( in PRUint32 size, 
                          [array, size_is(size)] in char i,
                          [array, size_is(size)] out char o);
        // array of void ptr is not supported
        void EchoArrayIID( in PRUint32 size, 
                          [array, size_is(size)] in nsIIDPtr i,
                          [array, size_is(size)] out nsIIDPtr o);
        void EchoArrayCHAR_STR( in PRUint32 size, 
                          [array, size_is(size)] in string i,
                          [array, size_is(size)] out string o);
        void EchoArrayWCHAR_STR( in PRUint32 size, 
                          [array, size_is(size)] in wstring i,
                          [array, size_is(size)] out wstring o);
        void EchoArrayINTERFACE( in PRUint32 size, 
                          [array, size_is(size)] in rbIXPCOMTest i,
                          [array, size_is(size)] out rbIXPCOMTest o);
        void EchoArrayINTERFACE_IS( in PRUint32 size, 
                          in nsIIDPtr iid,
                          [array, size_is(size), iid_is(iid)] 
                          in nsQIResult i,
                          [array, size_is(size), iid_is(iid)] 
                          out nsQIResult o);
        // array of array, sized (w)string or domstring is not supported
        // by xpidl.

        boolean EchoBoolean2( in boolean bi, out boolean bo );
        // nagate bio
        boolean EchoBoolean3( inout boolean bio, out boolean bo );
        
        PRUint16 TestArrayIn1( in PRUint32 size,
                               [array, size_is(size)] in PRUint16 ary);
        PRUint16 TestArrayIn2( [array, size_is(size)] in PRUint16 ary,
                               in PRUint32 size);
        void TestArrayOut1( out PRUint32 size,
                            [array, size_is(size)] out PRUint16 ary);
        void TestArrayOut2([array, size_is(size)] out PRUint16 ary,
                           out PRUint32 size);
        void TestArrayOut3( in PRUint32 size,
                        [retval, array, size_is(size)] out PRUint16 ary);

        PRUint32 TestSizeIsOverwrite( in PRUint32 size,
                                  [size_is(size)] in string s1,
                                  [size_is(size)] in string s2);

        [noscript] void Unscriptable( in voidPtr p );

        void TestInterfacesIsInout ( inout nsIIDPtr iid,
                                     [iid_is(iid)] inout nsQIResult ii);

        boolean TestInterfacePtrIn( in rbIXPCOMTest i, in boolean b );
        rbIXPCOMTest TestInterfacePtrOut();
};
