import os
import re

####################################################################################
# Command line options
#
opts = Options('custom.py')
opts.AddOptions(
	('CXX', 'The C++ compiler command'),
	("EXTRA_INCLUDE_PATH", "extra include paths",""),
	("EXTRA_LIBRARY_PATH", "extra library search paths",""),
	("EXTRA_CPP_FLAGS", "extra flags for c++ compiler",""),
	("EXTRA_LINK_FLAGS", "extra flags for linker",""),
	("EXTRA_LIBS", "extra libraries to include at link time",""),
	("PREFIX", "Install prefix", "/usr/local/"),
	PathOption('MOZILLA_DIST', 'Path to mozilla distribution directory', ""), 
	PathOption('MOZILLA_COMPONENTS', 'Path where components will be installed', ""), 
	('ERLC', 'Path to erlang compiler', 'erlc'), 
	PackageOption('EPI_INC', 'Path to include headers of EPI library',  0),
	PackageOption('EPI_LIB', 'Path to EPI library',  0),
	PackageOption('EI_INC', 'Path to include headers of EI library',  0),
	PackageOption('EI_LIB', 'Path to EI library',  0),
	PackageOption('OPENTHREADS_INC', 'Path to include headers of openthreads library', 0),
	PackageOption('OPENTHREADS_LIB', 'Path to openthreads library', 0),
	PackageOption('LIBCWD_INC', 'Path to include headers of libcwd library', 0),
	PackageOption('LIBCWD_LIB', 'Path to libcwd library', 0),
#TODO:	BoolOption('USE_LIBCWD', 'Use libcwd library or not (only in debug build)', 1)
	BoolOption('debug', 'debug build', 1)
	)

####################################################################################
# CPPFLAGS
DEFAULT_CPPFLAGS = Split('-Wall -Wno-ctor-dtor-privacy -Wno-long-long -Wno-non-virtual-dtor')
OPT_CPPFLAGS = Split('-fno-rtti -ansi -pedantic')
DEBUG_CPPFLAGS = Split(' -g -fno-inline')

####################################################################################
# Default environment (using os environment)
env = Environment(options=opts, ENV = os.environ)
				  
debug = env.get('debug',0)

env.Append(CPPPATH = Split(env["EXTRA_INCLUDE_PATH"]))
env.Append(CPPFLAGS = Split(env["EXTRA_CPP_FLAGS"]))
env.Append(LINKFLAGS = Split(env["EXTRA_LINK_FLAGS"]))
env.Append(LIBPATH = Split(env["EXTRA_LIBRARY_PATH"]))
env.Append(LIBS = Split(env["EXTRA_LIBS"]))

if debug:
	env.Append(CPPPATH = ['${EPI_INC}', '${EI_INC}', '${OPENTHREADS_INC}', '${LIBCWD_INC}'])
	env.Append(LIBPATH = ['${EPI_LIB}', '${EI_LIB}', '${OPENTHREADS_LIB}', '${LIBCWD_LIB}'])
	env.Append(CPPFLAGS = DEBUG_CPPFLAGS + DEFAULT_CPPFLAGS)
	env.Append(LIBS = ['epi', 'ei', 'OpenThreads'])
	env.Append(ERLFLAGS = ['-DLOGGER'])
else:
	env.Append(CPPPATH = ['${EPI_INC}', '${EI_INC}', '${OPENTHREADS_INC}'])
	env.Append(LIBPATH = ['${EPI_LIB}', '${EI_LIB}', '${OPENTHREADS_LIB}'])
	env.Append(CPPFLAGS = OPT_CPPFLAGS + DEFAULT_CPPFLAGS)
	env.Append(LIBS = ['epi', 'ei', 'OpenThreads'])

####################################################################################
# Mozilla dependency
MOZILLA_DIST = env.get('MOZILLA_DIST',0)

if MOZILLA_DIST == 0:
	print "Can't locate mozilla dist directory"
	sys.exit()

MOZILLA_UTIL_PATH = os.path.join(MOZILLA_DIST,'bin')
MOZILLA_DIST_BIN = os.path.join(MOZILLA_DIST,'bin')

MOZILLA_CPPPATH = [ os.path.join(MOZILLA_DIST, 'sdk', 'include'),
					os.path.join(MOZILLA_DIST, 'include', 'xpcom'),
					os.path.join(MOZILLA_DIST, 'include', 'string'),
					os.path.join(MOZILLA_DIST, 'include', 'xpconnect'),
					os.path.join(MOZILLA_DIST, 'include', 'js'),
					os.path.join(MOZILLA_DIST, 'include') ]

MOZILLA_LIBPATH = [ os.path.join(MOZILLA_DIST,'bin'), 
                    os.path.join(MOZILLA_DIST,'lib')]

MOZILLA_IDLPATH = [ os.path.join(MOZILLA_DIST+'idl') ]

MOZILLA_COMPONENTS_PATH = \
	env.get('MOZILLA_COMPONENTS', os.path.join(MOZILLA_DIST_BIN, 'components'))

MOZILLA_CPPFLAGS = Split("-include mozilla-config.h -DXPCOM_GLUE")
MOZILLA_LINKFLAGS = Split("--bind_at_load")

MOZILLA_LIBS = Split("nspr4 plds4 plc4 xpcom")

env.Append(CPPPATH = MOZILLA_CPPPATH)
env.Append(LIBPATH = MOZILLA_LIBPATH)
env.Append(CPPFLAGS = MOZILLA_CPPFLAGS)
env.Append(LINKFLAGS = MOZILLA_LINKFLAGS)
env.Append(LIBS = MOZILLA_LIBS)
env.Append(IDLPATH = MOZILLA_IDLPATH )

###################################################################################
# XPIDL Builders
XPIDL_COMMAND = os.path.join(MOZILLA_DIST_BIN, 'xpidl')

typelibrary_builder = Builder(
			generator = lambda source, target, env, for_signature:
				XPIDL_COMMAND + 
				reduce(lambda acum, path: acum+' -I'+str(path), 
					[""] + env.get('IDLPATH', "")) + 
				' -m typelib -e $TARGET $SOURCES' ,
    	    suffix = '.xpt',
            src_suffix = '.idl')
            
interfaceheader_builder = Builder(
			generator = lambda source, target, env, for_signature:
				XPIDL_COMMAND + 
				reduce(lambda acum, path: acum+' -I'+str(path), 
					[""] + env.get('IDLPATH', "")) + 
				' -m header -e $TARGET $SOURCES' ,
			suffix = '.h',
			src_suffix = '.idl')
component_builder = Builder(
			action = 'g++ -shared -o $TARGET $SOURCES -L $LIBPATH $LIBRARIES $LINKFLAGS')
			
env.Append(BUILDERS = {'TypeLibrary': typelibrary_builder})
env.Append(BUILDERS = {'InterfaceHeader': interfaceheader_builder})
env.Append(BUILDERS = {'Component': component_builder})

###################################################################################
# Erlang Builder
ERLC = env.get('ERLC',0)

erlang_include_re = re.compile(r'^-include\s*\(\s*[\"\'](.*)[\"\']\s*\)\s*\.\s*$', re.M)
erlang_behaviour_re = re.compile(r'^-behaviour\s*\(\s*(.*)\s*\)\s*\.\s*$', re.M)

def erlanginclude_scan(node, env, path):
	contents = node.get_contents()
	includes = erlang_include_re.findall(contents)
	return includes
	
def erlangbehaviour_scan(node, env, path):
	contents = node.get_contents()
	behaviours = map(lambda file: file+'.erl', 
					 erlang_behaviour_re.findall(contents))
	return behaviour

erlangscan = Scanner(function = erlanginclude_scan,
					 skeys = ['.erl', '.hrl'],
					 recursive = 1)
#env.Append(SCANNERS = erlangscan)

beam_builder = Builder(
			generator = 
				lambda source, target, env, for_signature:
					ERLC + 
					# Append include entries
					reduce(lambda acum, path: acum+' -I '+str(path), 
						[""] + env.get('ERLINCLUDE', [])) + 
					# Append path entries
					reduce(lambda acum, path: acum+' -pa '+str(path), 
						[""] + env.get('ERLPATH', [])) + 
					# Append flabs
					reduce(lambda acum, path: acum+' '+str(path), 
						[""] + env.get('ERLFLAGS', [])) + 
					' -o' + os.path.dirname(str(source[0])) +' $SOURCES' ,
    	    suffix = '.beam',
            src_suffix = '.erl')
            
env.Append(BUILDERS = {'Beam': beam_builder})

###################################################################################
Help(opts.GenerateHelpText(env))

###################################################################################

# Path to nsError.h file for generation of erlang constants
NSERROR_H_PATH = os.path.join(MOZILLA_DIST, 'include', 'xpcom', 'nsError.h')
Export('env', 'MOZILLA_COMPONENTS_PATH', 'MOZILLA_DIST_BIN', 'NSERROR_H_PATH')	

SConscript('src/SConstruct')
SConscript('erlang/SConstruct')
SConscript('test/SConstruct')
